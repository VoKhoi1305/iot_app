<div id="mapContainer" style="width: 100%; height: 600PX;"></div>
<script src="https://js.api.here.com/v3/3.1/mapsjs-core.js"></script>
<script src="https://js.api.here.com/v3/3.1/mapsjs-service.js"></script>
<script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js"></script>
<script type="text/javascript" charset="utf-8" src="https://js.api.here.com/v3/3.1/mapsjs-ui.js" ></script>
<link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css" />

<script> var platform = new H.service.Platform({
'apikey': '_6mrku4OzHFiet0E9I6OChX8MzQ5YtFRf93SeSKScKA' 
});

// Obtain the default map types from the platform object:
var defaultLayers = platform.createDefaultLayers();

 const map = new H.Map(
            document.getElementById("mapContainer"),
            defaultLayers.vector.normal.map, {
                zoom: 10,
                center: { lat: 21.97, lng: 105.09 },
                // Add space around the map edges to ensure markers are not cut off:
                padding: { top: 50, right: 50, bottom: 50, left: 50 }
            });
      /*
       //const origin = { lat: 56.97, lng: 24.09 };
        //const destination = { lat: 54.70, lng: 25.24 };
        //const routingParameters = {
          //  'routingMode': 'fast',
           // 'transportMode': 'car',
           //'origin': `${origin.lat},${origin.lng}`,
         // The end point of the route:
         // 'destination': `${destination.lat},${destination.lng}`,
            // Include the route shape in the response
           // 'return': 'polyline',
       // };

        // Define a callback function to process the routing response:
       // const onResult = function(result) {
            // Ensure that at least one route was found
         //   if (result.routes.length) {
           //     const lineStrings = [];
             //   result.routes[0].sections.forEach((section) => {
                    // Create a linestring to use as a point source for the route line
               //     lineStrings.push(H.geo.LineString.fromFlexiblePolyline(section.polyline));
               // });

                // Create an instance of H.geo.MultiLineString
                const multiLineString = new H.geo.MultiLineString(lineStrings);

                // Create a polyline to display the route:
                const routeLine = new H.map.Polyline(multiLineString, {
                    style: {
                        strokeColor: 'blue',
                        lineWidth: 3
                    }
                });

                // Create a marker for the start point:
                const startMarker = new H.map.Marker(origin);

                // Create a marker for the end point:
                const endMarker = new H.map.Marker(destination);

                // Add objects to the map
                map.addObject(routeLine);
                map.addObject(startMarker);
                map.addObject(endMarker);

                // Set the map viewport to make the entire route visible:
                map.getViewModel().setLookAtData({
                    bounds: routeLine.getBoundingBox()
                });
            }
        };

        // Get an instance of the routing service version 8:
        var router = platform.getRoutingService(null, 8);

        // Call calculateRoute() with the routing parameters,
        // the callback and an error callback function (called if a
        // communication error occurs):
        router.calculateRoute(routingParameters, onResult, function(error) {
            alert(error.message);
        });
*/
   const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));
   // Create the default UI:
const ui = H.ui.UI.createDefault(map, defaultLayers);
const control = ui.getControl('controlName'); // Replace 'controlName' with the name of the control you want to manage, for example, 'mapsettings.'
const overviewLayers = platform.createDefaultLayers();


</script> 